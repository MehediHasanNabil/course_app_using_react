{"version":3,"sources":["Components/Courses/Courses.js","Components/Price/Price.js","App.js","serviceWorker.js","index.js"],"names":["Courses","props","courseItem","name","image","price","title","totalCourses","className","src","alt","onClick","Price","totalPrice","toFixed","App","useState","setcourse","subject","Setsubject","total","i","length","useEffect","data","map","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8hJAoBeA,G,kBAhBC,SAACC,GAAW,IAAD,EACaA,EAAMC,WAAnCC,EADgB,EAChBA,KAAMC,EADU,EACVA,MAAOC,EADG,EACHA,MAAOC,EADJ,EACIA,MACrBC,EAAeN,EAAMM,aAC3B,OACI,yBAAKC,UAAU,4CACX,yBAAKC,IAAKL,EAAOM,IAAI,KACrB,yBAAKF,UAAU,aACX,uBAAGA,UAAU,aAAY,2BAAIL,IAC7B,uBAAGK,UAAU,aAAb,SAAgCF,GAChC,uBAAGE,UAAU,aAAb,WAAkCH,GAClC,4BAAQG,UAAU,wBAAwBG,QAAS,kBAAMJ,EAAaN,EAAMC,cAA5E,kB,OCHDU,EATD,SAACX,GACX,IAAMY,EAAaZ,EAAMY,WACzB,OACI,6BACI,4BAAI,4CAAkBA,EAAWC,QAAQ,OC+BtCC,MA7Bf,WAQI,IARY,IAAD,EACiBC,mBAAS,IAD1B,mBACIC,GADJ,aAEmBD,mBAAS,IAF5B,mBAEJE,EAFI,KAEKC,EAFL,KAGLZ,EAAe,SAACL,GAClB,IAAMkB,EAAK,sBAAOF,GAAP,CAAgBhB,IAC3BiB,EAAWC,IAEXP,EAAa,EACRQ,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAAK,CAErCR,GADaK,EAAQG,GACUhB,MAKnC,OAHAkB,qBAAU,WACRN,EAAUO,KACT,IAEC,yBAAKhB,UAAU,OACX,wBAAIA,UAAU,qBAAd,0BACA,4BAAI,6CAAmBU,EAAQI,SAC/B,kBAAC,EAAD,CAAOT,WAAYA,IACnB,yBAAKL,UAAU,aAEPgB,EAAKC,KAAI,SAAAvB,GAAU,OAAI,kBAAC,EAAD,CAASA,WAAYA,EAAYK,aAAcA,EAAcmB,IAAKxB,EAAWyB,WClBpGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d42be4be.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './Courses.css';\r\n\r\nconst Courses = (props) => {\r\n    const {name, image, price, title} = props.courseItem;\r\n    const totalCourses = props.totalCourses;\r\n    return (\r\n        <div className=\"card my-4 mx-3 shadow rounded float-left\">\r\n            <img src={image} alt=\"\" />\r\n            <div className=\"card-body\">\r\n                <p className=\"card-text\"><b>{name}</b></p>\r\n                <p className=\"card-text\">Name: {title}</p>\r\n                <p className=\"card-text\">Price: ${price}</p>\r\n                <button className=\"btn btn-primary w-100\" onClick={() => totalCourses(props.courseItem)}>Enroll Now</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Courses;","import React from 'react';\r\n\r\nconst Price = (props) => {\r\n    const totalPrice = props.totalPrice;\r\n    return (\r\n        <div>\r\n            <h3><b>Total Price: ${totalPrice.toFixed(2)}</b></h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Price;","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport './App.css';\r\nimport Courses from './Components/Courses/Courses';\r\nimport data from './Components/Data/Data.json';\r\nimport Price from './Components/Price/Price';\r\n    \r\nfunction App() {\r\n    const [course, setcourse] = useState([]);\r\n    const [subject, Setsubject] = useState([]);\r\n    const totalCourses = (courseItem) => {\r\n        const total = [...subject, courseItem];\r\n        Setsubject(total);\r\n    }\r\n    let totalPrice = 0;\r\n    for (let i = 0; i < subject.length; i++) {\r\n        const item = subject[i];\r\n        totalPrice = totalPrice + item.price;\r\n    }\r\n    useEffect(() => {\r\n      setcourse(data);\r\n    }, []);\r\n    return (\r\n        <div className=\"App\">\r\n            <h1 className=\"pt-4 text-primary\">Web Development Course</h1>\r\n            <h2><b>Total Courses: {subject.length}</b></h2>\r\n            <Price totalPrice={totalPrice}></Price>\r\n            <div className=\"container\">\r\n                {\r\n                    data.map(courseItem => <Courses courseItem={courseItem} totalCourses={totalCourses} key={courseItem.id}></Courses>)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}